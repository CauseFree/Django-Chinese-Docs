========
Settings
========

.. contents::
    :local:
    :depth: 1

.. warning::

    覆写设置项时，特别是在默认值为空元组()或是空字典{}的情况下，要格外谨慎。比如 :setting:`MIDDLEWARE_CLASSES`
    和 :setting:`TEMPLATE_CONTEXT_PROCESSORS` 。要确保其包含你要用到的Django特性。

有效的设置项
============

接下来我们会按照字母顺序展示所有的可用设置项及其默认值。

.. setting:: ABSOLUTE_URL_OVERRIDES

ABSOLUTE_URL_OVERRIDES
----------------------

默认值: ``{}`` (空字典)

该设置项为一个字典，用于将 ``"app_label.model_name"`` 字符串与函式进行映射。函式接受一个model对象做为参数并返回该对象的网址。
这相当于在其中的每个应用的底层上重载 ``get_absolute_url()`` 方法，例如::

    ABSOLUTE_URL_OVERRIDES = {
        'blogs.weblog': lambda o: "/blogs/%s/" % o.slug,
        'news.story': lambda o: "/stories/%s/%s/" % (o.pub_year, o.slug),
    }

注意用于该设置项的model字符串无论其实际名称是什么，在此处都应该设为小写。

.. setting:: ADMIN_FOR

ADMIN_FOR
---------

默认项: ``()`` (空元组)

一个settings元组，用于存放django自带管理后台要用到的 settings 模块（格式如 ``'foo.bar.baz'`` ），

自带的管理后台在对models,视图和模板标签的自动内省的文档中会用到该设置。

.. setting:: ADMINS

ADMINS
------

默认值: ``()`` (空元组)

该元组内存放的是可以接收代码错误通知的用户。当
``DEBUG=False`` 时，如果某个视图(view)抛出异常，Django就会将带有详细异常信息的以邮件的形式发送给上述用户。
元组中的每个成员应该是一个形如(完整名称,邮件地址)的二元组，例如::

    (('John', 'john@example.com'), ('Mary', 'mary@example.com'))

要注意：无论何时，只要有错误发生，元组中的 *所有用户* 都会收到Django发送的邮件。
wrongway特别提醒：有时这些错误会很多很烦，比如某些２B爬虫访问了某个不存的网址。
详见 :doc:`/howto/error-reporting` 

.. setting:: ALLOWED_INCLUDE_ROOTS

ALLOWED_INCLUDE_ROOTS
---------------------

默认值: ``()`` (空元组)

该元组内存放的是表示嵌入文件根路径的字符串——只有在某字符串存在于该元组的情况下，Django的 ``{% ssi %}`` 模板标签才会嵌入以其为前缀的文件。
这样做是出于安全考虑，从而使模板作者不能访问到他们不该访问的文件。

举个例子，我们将 :setting:`ALLOWED_INCLUDE_ROOTS` 设为 ``('/home/html', '/var/www')`` ，
那么 ``{% ssi /home/html/foo.txt %}`` 是有效的，而 ``{% ssi /etc/passwd %}``　则是无效的。

.. setting:: APPEND_SLASH

APPEND_SLASH
------------

默认值: ``True``

设为 ``True`` 时，如果请求的URL与URLconf中的任何一个URL模式都不匹配，且URL并没有以斜杠结尾，那么Django就会重定向到以斜杠结尾的相同网址。
要注意的是，重定向可能会导致某些POST请求所提交的数据丢失。

:setting:`APPEND_SLASH` 设置项只有在安装了
:class:`~django.middleware.common.CommonMiddleware` 的情况下才会生效。
(详见 :doc:`/topics/http/middleware`)。 也可参见 :setting:`PREPEND_WWW` 。

.. setting:: AUTHENTICATION_BACKENDS

AUTHENTICATION_BACKENDS
-----------------------

默认值: ``('django.contrib.auth.backends.ModelBackend',)``

是一个存放用户认址后端类(authentication backend class)的元组，用于于认证用户详见
:doc:`用户认证后端文档
</ref/authbackends>` 。

.. setting:: AUTH_PROFILE_MODULE

AUTH_PROFILE_MODULE
-------------------

默认值: 未定义

当前站点使用的用户附加属性模型。详面
:ref:`auth-profiles`.

.. setting:: CACHES

CACHES
------

.. versionadded:: 1.3

默认值::

    {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        }
    }

该设置项包含了Django会用到的所有缓存设置。这是一个嵌套的字典，其中的每个键名（即缓存项别名）都对应一个存放缓存选项的字典。


:setting:`CACHES` 字典中必须包含一个 ``default`` 缓存；其他缓存可以随意命名。
如果你正在使用缓存的并非是本地内存缓存，或者你想定义多个缓存，就要用到其他选项。
以下就是可用的缓存选项：

.. setting:: CACHES-BACKEND

BACKEND
~~~~~~~

默认值: ``''`` (空字符串)

要使用的缓存后端。内置的缓存后端有以下几种：

* ``'django.core.cache.backends.db.DatabaseCache'``
* ``'django.core.cache.backends.dummy.DummyCache'``
* ``'django.core.cache.backends.filebased.FileBasedCache'``
* ``'django.core.cache.backends.locmem.LocMemCache'``
* ``'django.core.cache.backends.memcached.MemcachedCache'``
* ``'django.core.cache.backends.memcached.PyLibMCCache'``

我们可以将:setting:`BACKEND <CACHE-BACKEND>` 设为某个缓存后端的可访问路径(例如 ``mypackage.backends.whatever.WhateverCache``)，以使用非Django内置的第三方缓存。
您不妨参考其他后端，从头编写一个完整的新缓存后端，以此做为一个读者练习。

.. note::
    在Django1.3之前，我们使用以后端类型名为前缀的URI来表示Django内置的缓存后端(比如，使用``'db://tablename'`` 表示使用数据库缓存后端)。
    我们不建议使用这种格式，它会在Django1.5中彻底去除。

.. setting:: CACHES-KEY_FUNCTION

KEY_FUNCTION
~~~~~~~~~~~~

一个以'.'做为路径间隔的字符串，表示一个函式的可访问路径。该函式决定了如何将前缀，版本以及键名拼装成最终的缓存键。
默认的实现方法如下::

    def make_key(key, key_prefix, version):
        return ':'.join([key_prefix, str(version), smart_str(key)])

如果你想使用自定义的函式，新函式只需与上述参数相同即可。

详见 :ref:`缓存文档 <cache_key_transformation>` 。

.. setting:: CACHES-KEY_PREFIX

KEY_PREFIX
~~~~~~~~~~

默认值: ``''`` (空字符串)

做为前缀自动被Django包含在所有缓存键名中。

详见 :ref:`缓存文档 <cache_key_prefixing>` 。

.. setting:: CACHES-LOCATION

LOCATION
~~~~~~~~

默认值: ``''`` (空字符串)

要使用的缓存位置。它可以是文件系统缓存的一个目录，也可以是memcache服务器的主机和端口，或是仅仅是本地内存缓存的一个简单标识名称::

    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
            'LOCATION': '/var/tmp/django_cache',
        }
    }

.. setting:: CACHES-OPTIONS

OPTIONS
~~~~~~~

默认值: None

传递给缓存后端的其他选项。根据所使用的缓存后端不同，使用不同的参数。

具体的参数列表详见
:doc:`缓存后端 </topics/cache>` ，以了解您所选用的后端使用哪些参数。

.. setting:: CACHES-TIMEOUT

TIMEOUT
~~~~~~~

默认值: 300

设置缓存项的过期时间，以秒为单位。

.. setting:: CACHES-VERSION

VERSION
~~~~~~~

默认值: ``1``

由Django生成的用于组合缓存键名的默认版本数字。

详见 :ref:`cache documentation <cache_versioning>` 。

.. setting:: CACHE_MIDDLEWARE_ALIAS

CACHE_MIDDLEWARE_ALIAS
----------------------

默认值: ``default``

用于缓存中间件的缓存链接。

.. setting:: CACHE_MIDDLEWARE_ANONYMOUS_ONLY

CACHE_MIDDLEWARE_ANONYMOUS_ONLY
-------------------------------

默认值: ``False``

如果为 ``True`` ，只有匿名请求(例如非登录用户的请求)才会被缓存。否则，缓存中间件会缓存每一张没有GET和POST传入参数的网页。

将该设置设为 ``True`` 时，要在middleware中添加 ``AuthenticationMiddleware`` 。

详见 :doc:`/topics/cache`.

.. setting:: CACHE_MIDDLEWARE_KEY_PREFIX

CACHE_MIDDLEWARE_KEY_PREFIX
---------------------------

默认值: ``''`` (空字符串)

缓存中间件要用到的缓存前缀。

详见 :doc:`/topics/cache`.

.. setting:: CACHE_MIDDLEWARE_SECONDS

CACHE_MIDDLEWARE_SECONDS
------------------------

默认值: ``600``

使用缓存中间件或是 ``cache_page()`` 装饰器时缓存一个页面的过期时间，单位是秒。

详见 :doc:`/topics/cache` 。

.. setting:: CSRF_COOKIE_DOMAIN

CSRF_COOKIE_DOMAIN
------------------

.. versionadded:: 1.2

默认值: ``None``

设置启用CSRF cookie的站点。它可以轻易地将跨站请求伪造与正常的跨子站请求区分开。
该设置项的格式应该类似 ``".lawrence.com"`` ，以允许由一个子站表单发出的POST请求可以被另一个子站的视图(view)所接收。

请注意该设置项的存在并不意味着：在默认情况下，Django的CSRF防护对于跨子站攻击就是安全的。详见
:ref:`CSRF 限制 <csrf-limitations>` 一节。

.. setting:: CSRF_COOKIE_NAME

CSRF_COOKIE_NAME
----------------

.. versionadded:: 1.2

默认值: ``'csrftoken'``

用于CSRF认证令牌的cookie名称。可以是任何名称，详见
:doc:`/ref/contrib/csrf`.

.. setting:: CSRF_COOKIE_PATH

CSRF_COOKIE_PATH
----------------

.. versionadded:: 1.4

默认值: ``'/'``

应用于CSRF cookie的路径。它应该匹配你的Django应用的URL路径，或是该路径的父路径。

如果你在同一台主机上运行多个Django实例时，该设定会非常有用。它们各自使用不同的cookie路径，每个实例只能看到自己的CSRF cookie。

.. setting:: CSRF_COOKIE_SECURE

CSRF_COOKIE_SECURE
------------------

.. versionadded:: 1.4

默认值: ``False``

Whether to use a secure cookie for the CSRF cookie. If this is set to ``True``,
the cookie will be marked as "secure," which means browsers may ensure that the
cookie is only sent under an HTTPS connection.

.. setting:: CSRF_FAILURE_VIEW

CSRF_FAILURE_VIEW
-----------------

.. versionadded:: 1.2

默认值: ``'django.views.csrf.csrf_failure'``

A dotted path to the view function to be used when an incoming request
is rejected by the CSRF protection.  The function should have this signature::

  def csrf_failure(request, reason="")

where ``reason`` is a short message (intended for developers or logging, not for
end users) indicating the reason the request was rejected.  See
:doc:`/ref/contrib/csrf`.


.. setting:: DATABASES

DATABASES
---------

.. versionadded:: 1.2

Default: ``{}`` (Empty dictionary)

A dictionary containing the settings for all databases to be used with
Django. It is a nested dictionary whose contents maps database aliases
to a dictionary containing the options for an individual database.

The :setting:`DATABASES` setting must configure a ``default`` database;
any number of additional databases may also be specified.

The simplest possible settings file is for a single-database setup using
SQLite. This can be configured using the following::

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': 'mydatabase'
        }
    }

For other database backends, or more complex SQLite configurations, other options
will be required. The following inner options are available.

.. setting:: DATABASE-ENGINE

ENGINE
~~~~~~

Default: ``''`` (Empty string)

The database backend to use. The built-in database backends are:

* ``'django.db.backends.postgresql_psycopg2'``
* ``'django.db.backends.mysql'``
* ``'django.db.backends.sqlite3'``
* ``'django.db.backends.oracle'``

You can use a database backend that doesn't ship with Django by setting
``ENGINE`` to a fully-qualified path (i.e.
``mypackage.backends.whatever``). Writing a whole new database backend from
scratch is left as an exercise to the reader; see the other backends for
examples.

.. note::
    Prior to Django 1.2, you could use a short version of the backend name
    to reference the built-in database backends (e.g., you could use
    ``'sqlite3'`` to refer to the SQLite backend). This format has been
    deprecated, and will be removed in Django 1.4.

.. setting:: HOST

HOST
~~~~

Default: ``''`` (Empty string)

Which host to use when connecting to the database. An empty string means
localhost. Not used with SQLite.

If this value starts with a forward slash (``'/'``) and you're using MySQL,
MySQL will connect via a Unix socket to the specified socket. For example::

    "HOST": '/var/run/mysql'

If you're using MySQL and this value *doesn't* start with a forward slash, then
this value is assumed to be the host.

If you're using PostgreSQL, an empty string means to use a Unix domain socket
for the connection, rather than a network connection to localhost. If you
explicitly need to use a TCP/IP connection on the local machine with
PostgreSQL, specify ``localhost`` here.

.. setting:: NAME

NAME
~~~~

Default: ``''`` (Empty string)

The name of the database to use. For SQLite, it's the full path to the database
file. When specifying the path, always use forward slashes, even on Windows
(e.g. ``C:/homes/user/mysite/sqlite3.db``).

.. setting:: OPTIONS

OPTIONS
~~~~~~~

Default: ``{}`` (Empty dictionary)

Extra parameters to use when connecting to the database. Available parameters
vary depending on your database backend.

Some information on available parameters can be found in the
:doc:`Database Backends </ref/databases>` documentation. For more information,
consult your backend module's own documentation.

.. setting:: PASSWORD

PASSWORD
~~~~~~~~

Default: ``''`` (Empty string)

The password to use when connecting to the database. Not used with SQLite.

.. setting:: PORT

PORT
~~~~

Default: ``''`` (Empty string)

The port to use when connecting to the database. An empty string means the
default port. Not used with SQLite.

.. setting:: USER

USER
~~~~

Default: ``''`` (Empty string)

The username to use when connecting to the database. Not used with SQLite.

.. setting:: TEST_CHARSET

TEST_CHARSET
~~~~~~~~~~~~

Default: ``None``

The character set encoding used to create the test database. The value of this
string is passed directly through to the database, so its format is
backend-specific.

Supported for the PostgreSQL_ (``postgresql_psycopg2``) and MySQL_ (``mysql``)
backends.

.. _PostgreSQL: http://www.postgresql.org/docs/8.2/static/multibyte.html
.. _MySQL: http://dev.mysql.com/doc/refman/5.0/en/charset-database.html

.. setting:: TEST_COLLATION

TEST_COLLATION
~~~~~~~~~~~~~~

Default: ``None``

The collation order to use when creating the test database. This value is
passed directly to the backend, so its format is backend-specific.

Only supported for the ``mysql`` backend (see the `MySQL manual`_ for details).

.. _MySQL manual: MySQL_

.. setting:: TEST_DEPENDENCIES

TEST_DEPENDENCIES
~~~~~~~~~~~~~~~~~

.. versionadded:: 1.3

Default: ``['default']``, for all databases other than ``default``,
which has no dependencies.

The creation-order dependencies of the database. See the documentation
on :ref:`controlling the creation order of test databases
<topics-testing-creation-dependencies>` for details.

.. setting:: TEST_MIRROR

TEST_MIRROR
~~~~~~~~~~~

Default: ``None``

The alias of the database that this database should mirror during
testing.

This setting exists to allow for testing of master/slave
configurations of multiple databases. See the documentation on
:ref:`testing master/slave configurations
<topics-testing-masterslave>` for details.

.. setting:: TEST_NAME

TEST_NAME
~~~~~~~~~

Default: ``None``

The name of database to use when running the test suite.

If the default value (``None``) is used with the SQLite database engine, the
tests will use a memory resident database. For all other database engines the
test database will use the name ``'test_' + DATABASE_NAME``.

See :doc:`/topics/testing`.

.. setting:: TEST_CREATE

TEST_CREATE
~~~~~~~~~~~

Default: ``True``

This is an Oracle-specific setting.

If it is set to ``False``, the test tablespaces won't be automatically created
at the beginning of the tests and dropped at the end.

.. setting:: TEST_USER

TEST_USER
~~~~~~~~~

Default: ``None``

This is an Oracle-specific setting.

The username to use when connecting to the Oracle database that will be used
when running tests. If not provided, Django will use ``'test_' + USER``.

.. setting:: TEST_USER_CREATE

TEST_USER_CREATE
~~~~~~~~~~~~~~~~

Default: ``True``

This is an Oracle-specific setting.

If it is set to ``False``, the test user won't be automatically created at the
beginning of the tests and dropped at the end.

.. setting:: TEST_PASSWD

TEST_PASSWD
~~~~~~~~~~~

Default: ``None``

This is an Oracle-specific setting.

The password to use when connecting to the Oracle database that will be used
when running tests. If not provided, Django will use a hardcoded default value.

.. setting:: TEST_TBLSPACE

TEST_TBLSPACE
~~~~~~~~~~~~~

Default: ``None``

This is an Oracle-specific setting.

The name of the tablespace that will be used when running tests. If not
provided, Django will use ``'test_' + NAME``.

.. setting:: TEST_TBLSPACE_TMP

TEST_TBLSPACE_TMP
~~~~~~~~~~~~~~~~~

Default: ``None``

This is an Oracle-specific setting.

The name of the temporary tablespace that will be used when running tests. If
not provided, Django will use ``'test_' + NAME + '_temp'``.

.. setting:: DATABASE_ROUTERS

DATABASE_ROUTERS
----------------

.. versionadded:: 1.2

Default: ``[]`` (Empty list)

The list of routers that will be used to determine which database
to use when performing a database queries.

See the documentation on :ref:`automatic database routing in multi
database configurations <topics-db-multi-db-routing>`.

.. setting:: DATE_FORMAT

DATE_FORMAT
-----------

Default: ``'N j, Y'`` (e.g. ``Feb. 4, 2003``)

The default formatting to use for displaying date fields in any part of the
system. Note that if :setting:`USE_L10N` is set to ``True``, then the
locale-dictated format has higher precedence and will be applied instead. See
:tfilter:`allowed date format strings <date>`.

.. versionchanged:: 1.2
    This setting can now be overriden by setting :setting:`USE_L10N` to ``True``.

See also :setting:`DATETIME_FORMAT`, :setting:`TIME_FORMAT` and :setting:`SHORT_DATE_FORMAT`.

.. setting:: DATE_INPUT_FORMATS

DATE_INPUT_FORMATS
------------------

.. versionadded:: 1.2

Default::

    ('%Y-%m-%d', '%m/%d/%Y', '%m/%d/%y', '%b %d %Y',
    '%b %d, %Y', '%d %b %Y', '%d %b, %Y', '%B %d %Y',
    '%B %d, %Y', '%d %B %Y', '%d %B, %Y')

A tuple of formats that will be accepted when inputting data on a date field.
Formats will be tried in order, using the first valid one. Note that these
format strings use Python's datetime_ module syntax, not the format strings
from the ``date`` Django template tag.

When :setting:`USE_L10N` is ``True``, the locale-dictated format has higher
precedence and will be applied instead.

See also :setting:`DATETIME_INPUT_FORMATS` and :setting:`TIME_INPUT_FORMATS`.

.. _datetime: http://docs.python.org/library/datetime.html#strftime-strptime-behavior

.. setting:: DATETIME_FORMAT

DATETIME_FORMAT
---------------

Default: ``'N j, Y, P'`` (e.g. ``Feb. 4, 2003, 4 p.m.``)

The default formatting to use for displaying datetime fields in any part of the
system. Note that if :setting:`USE_L10N` is set to ``True``, then the
locale-dictated format has higher precedence and will be applied instead. See
:tfilter:`allowed date format strings <date>`.

.. versionchanged:: 1.2
    This setting can now be overriden by setting :setting:`USE_L10N` to ``True``.

See also :setting:`DATE_FORMAT`, :setting:`TIME_FORMAT` and :setting:`SHORT_DATETIME_FORMAT`.

.. setting:: DATETIME_INPUT_FORMATS

DATETIME_INPUT_FORMATS
----------------------

.. versionadded:: 1.2

Default::

    ('%Y-%m-%d %H:%M:%S', '%Y-%m-%d %H:%M', '%Y-%m-%d',
    '%m/%d/%Y %H:%M:%S', '%m/%d/%Y %H:%M', '%m/%d/%Y',
    '%m/%d/%y %H:%M:%S', '%m/%d/%y %H:%M', '%m/%d/%y')

A tuple of formats that will be accepted when inputting data on a datetime
field. Formats will be tried in order, using the first valid one. Note that
these format strings use Python's datetime_ module syntax, not the format
strings from the ``date`` Django template tag.

When :setting:`USE_L10N` is ``True``, the locale-dictated format has higher
precedence and will be applied instead.

See also :setting:`DATE_INPUT_FORMATS` and :setting:`TIME_INPUT_FORMATS`.

.. _datetime: http://docs.python.org/library/datetime.html#strftime-strptime-behavior

.. setting:: DEBUG

DEBUG
-----

Default: ``False``

A boolean that turns on/off debug mode.

Never deploy a site into production with :setting:`DEBUG` turned on.

Did you catch that? NEVER deploy a site into production with :setting:`DEBUG`
turned on.

One of the main features of debug mode is the display of detailed error pages.
If your app raises an exception when ``DEBUG`` is ``True``, Django will display
a detailed traceback, including a lot of metadata about your environment, such
as all the currently defined Django settings (from ``settings.py``).

As a security measure, Django will *not* include settings that might be
sensitive (or offensive), such as ``SECRET_KEY`` or ``PROFANITIES_LIST``.
Specifically, it will exclude any setting whose name includes any of the
following:

    * API
    * KEY
    * PASS
    * PROFANITIES_LIST
    * SECRET
    * SIGNATURE
    * TOKEN

.. versionchanged:: 1.4

    We changed ``'PASSWORD'`` ``'PASS'``. ``'API'``, ``'TOKEN'`` and ``'KEY'``
    were added.

Note that these are *partial* matches. ``'PASS'`` will also match PASSWORD,
just as ``'TOKEN'`` will also match TOKENIZED and so on.

Still, note that there are always going to be sections of your debug output
that are inappropriate for public consumption. File paths, configuration
options and the like all give attackers extra information about your server.

It is also important to remember that when running with :setting:`DEBUG`
turned on, Django will remember every SQL query it executes. This is useful
when you're debugging, but it'll rapidly consume memory on a production server.

.. _django/views/debug.py: https://code.djangoproject.com/browser/django/trunk/django/views/debug.py

DEBUG_PROPAGATE_EXCEPTIONS
--------------------------

Default: ``False``

If set to True, Django's normal exception handling of view functions
will be suppressed, and exceptions will propagate upwards.  This can
be useful for some test setups, and should never be used on a live
site.

.. setting:: DECIMAL_SEPARATOR

DECIMAL_SEPARATOR
-----------------

.. versionadded:: 1.2

Default: ``'.'`` (Dot)

Default decimal separator used when formatting decimal numbers.

Note that if :setting:`USE_L10N` is set to ``True``, then the locale-dictated
format has higher precedence and will be applied instead.

See also :setting:`NUMBER_GROUPING`, :setting:`THOUSAND_SEPARATOR` and
:setting:`USE_THOUSAND_SEPARATOR`.


.. setting:: DEFAULT_CHARSET

DEFAULT_CHARSET
---------------

Default: ``'utf-8'``

Default charset to use for all ``HttpResponse`` objects, if a MIME type isn't
manually specified. Used with :setting:`DEFAULT_CONTENT_TYPE` to construct the
``Content-Type`` header.

.. setting:: DEFAULT_CONTENT_TYPE

DEFAULT_CONTENT_TYPE
--------------------

Default: ``'text/html'``

Default content type to use for all ``HttpResponse`` objects, if a MIME type
isn't manually specified. Used with :setting:`DEFAULT_CHARSET` to construct
the ``Content-Type`` header.

.. setting:: DEFAULT_EXCEPTION_REPORTER_FILTER

DEFAULT_EXCEPTION_REPORTER_FILTER
---------------------------------

Default: :class:`django.views.debug.SafeExceptionReporterFilter`

Default exception reporter filter class to be used if none has been assigned to
the :class:`HttpRequest` instance yet.
See :ref:`Filtering error reports<filtering-error-reports>`.

.. setting:: DEFAULT_FILE_STORAGE

DEFAULT_FILE_STORAGE
--------------------

Default: :class:`django.core.files.storage.FileSystemStorage`

Default file storage class to be used for any file-related operations that don't
specify a particular storage system. See :doc:`/topics/files`.

.. setting:: DEFAULT_FROM_EMAIL

DEFAULT_FROM_EMAIL
------------------

Default: ``'webmaster@localhost'``

Default email address to use for various automated correspondence from the
site manager(s).

.. setting:: DEFAULT_INDEX_TABLESPACE

DEFAULT_INDEX_TABLESPACE
------------------------

Default: ``''`` (Empty string)

Default tablespace to use for indexes on fields that don't specify
one, if the backend supports it (see :doc:`/topics/db/tablespaces`).

.. setting:: DEFAULT_TABLESPACE

DEFAULT_TABLESPACE
------------------

Default: ``''`` (Empty string)

Default tablespace to use for models that don't specify one, if the
backend supports it (see :doc:`/topics/db/tablespaces`).

.. setting:: DISALLOWED_USER_AGENTS

DISALLOWED_USER_AGENTS
----------------------

Default: ``()`` (Empty tuple)

List of compiled regular expression objects representing User-Agent strings that
are not allowed to visit any page, systemwide. Use this for bad robots/crawlers.
This is only used if ``CommonMiddleware`` is installed (see
:doc:`/topics/http/middleware`).

.. setting:: EMAIL_BACKEND

EMAIL_BACKEND
-------------

.. versionadded:: 1.2

Default: ``'django.core.mail.backends.smtp.EmailBackend'``

The backend to use for sending emails. For the list of available backends see
:doc:`/topics/email`.

.. setting:: EMAIL_FILE_PATH

EMAIL_FILE_PATH
---------------

.. versionadded:: 1.2

Default: Not defined

The directory used by the ``file`` email backend to store output files.

.. setting:: EMAIL_HOST

EMAIL_HOST
----------

Default: ``'localhost'``

The host to use for sending email.

See also :setting:`EMAIL_PORT`.

.. setting:: EMAIL_HOST_PASSWORD

EMAIL_HOST_PASSWORD
-------------------

Default: ``''`` (Empty string)

Password to use for the SMTP server defined in :setting:`EMAIL_HOST`. This
setting is used in conjunction with :setting:`EMAIL_HOST_USER` when
authenticating to the SMTP server. If either of these settings is empty,
Django won't attempt authentication.

See also :setting:`EMAIL_HOST_USER`.

.. setting:: EMAIL_HOST_USER

EMAIL_HOST_USER
---------------

Default: ``''`` (Empty string)

Username to use for the SMTP server defined in :setting:`EMAIL_HOST`.
If empty, Django won't attempt authentication.

See also :setting:`EMAIL_HOST_PASSWORD`.

.. setting:: EMAIL_PORT

EMAIL_PORT
----------

Default: ``25``

Port to use for the SMTP server defined in :setting:`EMAIL_HOST`.

.. setting:: EMAIL_SUBJECT_PREFIX

EMAIL_SUBJECT_PREFIX
--------------------

Default: ``'[Django] '``

Subject-line prefix for email messages sent with ``django.core.mail.mail_admins``
or ``django.core.mail.mail_managers``. You'll probably want to include the
trailing space.

.. setting:: EMAIL_USE_TLS

EMAIL_USE_TLS
-------------

Default: ``False``

Whether to use a TLS (secure) connection when talking to the SMTP server.

.. setting:: FILE_CHARSET

FILE_CHARSET
------------

Default: ``'utf-8'``

The character encoding used to decode any files read from disk. This includes
template files and initial SQL data files.

.. setting:: FILE_UPLOAD_HANDLERS

FILE_UPLOAD_HANDLERS
--------------------

Default::

    ("django.core.files.uploadhandler.MemoryFileUploadHandler",
     "django.core.files.uploadhandler.TemporaryFileUploadHandler",)

A tuple of handlers to use for uploading. See :doc:`/topics/files` for details.

.. setting:: FILE_UPLOAD_MAX_MEMORY_SIZE

FILE_UPLOAD_MAX_MEMORY_SIZE
---------------------------

Default: ``2621440`` (i.e. 2.5 MB).

The maximum size (in bytes) that an upload will be before it gets streamed to
the file system. See :doc:`/topics/files` for details.

.. setting:: FILE_UPLOAD_PERMISSIONS

FILE_UPLOAD_PERMISSIONS
-----------------------

Default: ``None``

The numeric mode (i.e. ``0644``) to set newly uploaded files to. For
more information about what these modes mean, see the documentation for
:func:`os.chmod`.

If this isn't given or is ``None``, you'll get operating-system
dependent behavior. On most platforms, temporary files will have a mode
of ``0600``, and files saved from memory will be saved using the
system's standard umask.

.. warning::

    **Always prefix the mode with a 0.**

    If you're not familiar with file modes, please note that the leading
    ``0`` is very important: it indicates an octal number, which is the
    way that modes must be specified. If you try to use ``644``, you'll
    get totally incorrect behavior.


.. setting:: FILE_UPLOAD_TEMP_DIR

FILE_UPLOAD_TEMP_DIR
--------------------

Default: ``None``

The directory to store data temporarily while uploading files. If ``None``,
Django will use the standard temporary directory for the operating system. For
example, this will default to '/tmp' on \*nix-style operating systems.

See :doc:`/topics/files` for details.

.. setting:: FIRST_DAY_OF_WEEK

FIRST_DAY_OF_WEEK
-----------------

.. versionadded:: 1.2

Default: ``0`` (Sunday)

Number representing the first day of the week. This is especially useful
when displaying a calendar. This value is only used when not using
format internationalization, or when a format cannot be found for the
current locale.

The value must be an integer from 0 to 6, where 0 means Sunday, 1 means
Monday and so on.

.. setting:: FIXTURE_DIRS

FIXTURE_DIRS
-------------

Default: ``()`` (Empty tuple)

List of directories searched for fixture files, in addition to the
``fixtures`` directory of each application, in search order.

Note that these paths should use Unix-style forward slashes, even on Windows.

See :ref:`initial-data-via-fixtures` and :ref:`topics-testing-fixtures`.

FORCE_SCRIPT_NAME
------------------

Default: ``None``

If not ``None``, this will be used as the value of the ``SCRIPT_NAME``
environment variable in any HTTP request. This setting can be used to override
the server-provided value of ``SCRIPT_NAME``, which may be a rewritten version
of the preferred value or not supplied at all.

.. setting:: FORMAT_MODULE_PATH

FORMAT_MODULE_PATH
------------------

.. versionadded:: 1.2

Default: ``None``

A full Python path to a Python package that contains format definitions for
project locales. If not ``None``, Django will check for a ``formats.py``
file, under the directory named as the current locale, and will use the
formats defined on this file.

For example, if :setting:`FORMAT_MODULE_PATH` is set to ``mysite.formats``,
and current language is ``en`` (English), Django will expect a directory tree
like::

    mysite/
        formats/
            __init__.py
            en/
                __init__.py
                formats.py

Available formats are :setting:`DATE_FORMAT`, :setting:`TIME_FORMAT`,
:setting:`DATETIME_FORMAT`, :setting:`YEAR_MONTH_FORMAT`,
:setting:`MONTH_DAY_FORMAT`, :setting:`SHORT_DATE_FORMAT`,
:setting:`SHORT_DATETIME_FORMAT`, :setting:`FIRST_DAY_OF_WEEK`,
:setting:`DECIMAL_SEPARATOR`, :setting:`THOUSAND_SEPARATOR` and
:setting:`NUMBER_GROUPING`.

.. setting:: IGNORABLE_404_URLS

IGNORABLE_404_URLS
------------------

.. versionadded:: 1.4

Default: ``()``

List of compiled regular expression objects describing URLs that should be
ignored when reporting HTTP 404 errors via email (see
:doc:`/howto/error-reporting`). Use this if your site does not provide a
commonly requested file such as ``favicon.ico`` or ``robots.txt``, or if it
gets hammered by script kiddies.

This is only used if :setting:`SEND_BROKEN_LINK_EMAILS` is set to ``True`` and
``CommonMiddleware`` is installed (see :doc:`/topics/http/middleware`).

.. setting:: INSTALLED_APPS

INSTALLED_APPS
--------------

Default: ``()`` (Empty tuple)

A tuple of strings designating all applications that are enabled in this Django
installation. Each string should be a full Python path to a Python package that
contains a Django application, as created by :djadmin:`django-admin.py startapp
<startapp>`.

.. admonition:: App names must be unique

    The application names (that is, the final dotted part of the
    path to the module containing ``models.py``) defined in
    :setting:`INSTALLED_APPS` *must* be unique. For example, you can't
    include both ``django.contrib.auth`` and ``myproject.auth`` in
    INSTALLED_APPS.

.. setting:: INTERNAL_IPS

INTERNAL_IPS
------------

Default: ``()`` (Empty tuple)

A tuple of IP addresses, as strings, that:

* See debug comments, when :setting:`DEBUG` is ``True``
* Receive X headers if the ``XViewMiddleware`` is installed (see
  :doc:`/topics/http/middleware`)

.. setting:: LANGUAGE_CODE

LANGUAGE_CODE
-------------

Default: ``'en-us'``

A string representing the language code for this installation. This should be in
standard :term:`language format<language code>`. For example, U.S. English is
``"en-us"``. See :doc:`/topics/i18n/index`.

.. setting:: LANGUAGE_COOKIE_NAME

LANGUAGE_COOKIE_NAME
--------------------

Default: ``'django_language'``

The name of the cookie to use for the language cookie. This can be whatever
you want (but should be different from :setting:`SESSION_COOKIE_NAME`). See
:doc:`/topics/i18n/index`.

.. setting:: LANGUAGES

LANGUAGES
---------

Default: A tuple of all available languages. This list is continually growing
and including a copy here would inevitably become rapidly out of date. You can
see the current list of translated languages by looking in
``django/conf/global_settings.py`` (or view the `online source`_).

.. _online source: https://code.djangoproject.com/browser/django/trunk/django/conf/global_settings.py

The list is a tuple of two-tuples in the format ``(language code, language
name)``, the ``language code`` part should be a
:term:`language name<language code>` -- for example, ``('ja', 'Japanese')``.
This specifies which languages are available for language selection. See
:doc:`/topics/i18n/index`.

Generally, the default value should suffice. Only set this setting if you want
to restrict language selection to a subset of the Django-provided languages.

If you define a custom :setting:`LANGUAGES` setting, it's OK to mark the
languages as translation strings (as in the default value referred to above)
-- but use a "dummy" ``gettext()`` function, not the one in
``django.utils.translation``. You should *never* import
``django.utils.translation`` from within your settings file, because that
module in itself depends on the settings, and that would cause a circular
import.

The solution is to use a "dummy" ``gettext()`` function. Here's a sample
settings file::

    gettext = lambda s: s

    LANGUAGES = (
        ('de', gettext('German')),
        ('en', gettext('English')),
    )

With this arrangement, ``django-admin.py makemessages`` will still find and
mark these strings for translation, but the translation won't happen at
runtime -- so you'll have to remember to wrap the languages in the *real*
``gettext()`` in any code that uses :setting:`LANGUAGES` at runtime.

.. setting:: LOCALE_PATHS

LOCALE_PATHS
------------

Default: ``()`` (Empty tuple)

A tuple of directories where Django looks for translation files.
See :ref:`how-django-discovers-translations`.

Example::

    LOCALE_PATHS = (
        '/home/www/project/common_files/locale',
        '/var/local/translations/locale'
    )

Note that in the paths you add to the value of this setting, if you have the
typical ``/path/to/locale/xx/LC_MESSAGES`` hierarchy, you should use the path to
the ``locale`` directory (i.e. ``'/path/to/locale'``).

.. setting:: LOGGING

LOGGING
-------

.. versionadded:: 1.3

Default: A logging configuration dictionary.

A data structure containing configuration information. The contents of
this data structure will be passed as the argument to the
configuration method described in :setting:`LOGGING_CONFIG`.

The default logging configuration passes HTTP 500 server errors to an
email log handler; all other log messages are given to a NullHandler.

.. setting:: LOGGING_CONFIG

LOGGING_CONFIG
--------------

.. versionadded:: 1.3

Default: ``'django.utils.log.dictConfig'``

A path to a callable that will be used to configure logging in the
Django project. Points at a instance of Python's `dictConfig`_
configuration method by default.

If you set :setting:`LOGGING_CONFIG` to ``None``, the logging
configuration process will be skipped.

.. _dictConfig: http://docs.python.org/library/logging.config.html#configuration-dictionary-schema

.. setting:: LOGIN_REDIRECT_URL

LOGIN_REDIRECT_URL
------------------

Default: ``'/accounts/profile/'``

The URL where requests are redirected after login when the
``contrib.auth.login`` view gets no ``next`` parameter.

This is used by the :func:`~django.contrib.auth.decorators.login_required`
decorator, for example.

.. _`note on LOGIN_REDIRECT_URL setting`:

.. note::
    You can use :func:`~django.core.urlresolvers.reverse_lazy` to reference
    URLs by their name instead of providing a hardcoded value. Assuming a
    ``urls.py`` with an URLpattern named ``home``::

        urlpatterns = patterns('',
            url('^welcome/$', 'test_app.views.home', name='home'),
        )

    You can use :func:`~django.core.urlresolvers.reverse_lazy` like this::

        from django.core.urlresolvers import reverse_lazy

        LOGIN_REDIRECT_URL = reverse_lazy('home')

    This also works fine with localized URLs using
    :func:`~django.conf.urls.i18n.i18n_patterns`.

.. setting:: LOGIN_URL

LOGIN_URL
---------

Default: ``'/accounts/login/'``

The URL where requests are redirected for login, especially when using the
:func:`~django.contrib.auth.decorators.login_required` decorator.

.. note::
    See the `note on LOGIN_REDIRECT_URL setting`_

.. setting:: LOGOUT_URL

LOGOUT_URL
----------

Default: ``'/accounts/logout/'``

LOGIN_URL counterpart.

.. note::
    See the `note on LOGIN_REDIRECT_URL setting`_

.. setting:: MANAGERS

MANAGERS
--------

Default: ``()`` (Empty tuple)

A tuple in the same format as :setting:`ADMINS` that specifies who should get
broken-link notifications when ``SEND_BROKEN_LINK_EMAILS=True``.

.. setting:: MEDIA_ROOT

MEDIA_ROOT
----------

Default: ``''`` (Empty string)

Absolute path to the directory that holds media for this installation, used
for :doc:`managing stored files </topics/files>`.

Example: ``"/home/media/media.lawrence.com/"``

See also :setting:`MEDIA_URL`.

.. setting:: MEDIA_URL

MEDIA_URL
---------

Default: ``''`` (Empty string)

URL that handles the media served from :setting:`MEDIA_ROOT`, used
for :doc:`managing stored files </topics/files>`.

Example: ``"http://media.lawrence.com/"``

.. versionchanged:: 1.3
   It must end in a slash if set to a non-empty value.

MESSAGE_LEVEL
-------------

.. versionadded:: 1.2

Default: `messages.INFO`

Sets the minimum message level that will be recorded by the messages
framework. See the :doc:`messages documentation </ref/contrib/messages>` for
more details.

MESSAGE_STORAGE
---------------

.. versionadded:: 1.2

Default: ``'django.contrib.messages.storage.user_messages.LegacyFallbackStorage'``

Controls where Django stores message data.  See the
:doc:`messages documentation </ref/contrib/messages>` for more details.

MESSAGE_TAGS
------------

.. versionadded:: 1.2

Default::

    {messages.DEBUG: 'debug',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'error',}

Sets the mapping of message levels to message tags. See the
:doc:`messages documentation </ref/contrib/messages>` for more details.

.. setting:: MIDDLEWARE_CLASSES

MIDDLEWARE_CLASSES
------------------

Default::

    ('django.middleware.common.CommonMiddleware',
     'django.contrib.sessions.middleware.SessionMiddleware',
     'django.middleware.csrf.CsrfViewMiddleware',
     'django.contrib.auth.middleware.AuthenticationMiddleware',
     'django.contrib.messages.middleware.MessageMiddleware',)

A tuple of middleware classes to use. See :doc:`/topics/http/middleware`.

.. versionchanged:: 1.2
   ``'django.contrib.messages.middleware.MessageMiddleware'`` was added to the
   default.  For more information, see the :doc:`messages documentation
   </ref/contrib/messages>`.

.. setting:: MONTH_DAY_FORMAT

MONTH_DAY_FORMAT
----------------

Default: ``'F j'``

The default formatting to use for date fields on Django admin change-list
pages -- and, possibly, by other parts of the system -- in cases when only the
month and day are displayed.

For example, when a Django admin change-list page is being filtered by a date
drilldown, the header for a given day displays the day and month. Different
locales have different formats. For example, U.S. English would say
"January 1," whereas Spanish might say "1 Enero."

See :tfilter:`allowed date format strings <date>`. See also
:setting:`DATE_FORMAT`, :setting:`DATETIME_FORMAT`,
:setting:`TIME_FORMAT` and :setting:`YEAR_MONTH_FORMAT`.

.. setting:: NUMBER_GROUPING

NUMBER_GROUPING
----------------

.. versionadded:: 1.2

Default: ``0``

Number of digits grouped together on the integer part of a number.

Common use is to display a thousand separator. If this setting is ``0``, then
no grouping will be applied to the number. If this setting is greater than
``0``, then :setting:`THOUSAND_SEPARATOR` will be used as the separator between
those groups.

Note that if :setting:`USE_L10N` is set to ``True``, then the locale-dictated
format has higher precedence and will be applied instead.

See also :setting:`DECIMAL_SEPARATOR`, :setting:`THOUSAND_SEPARATOR` and
:setting:`USE_THOUSAND_SEPARATOR`.

.. setting:: PASSWORD_RESET_TIMEOUT_DAYS

PASSWORD_RESET_TIMEOUT_DAYS
---------------------------

Default: ``3``

The number of days a password reset link is valid for. Used by the
:mod:`django.contrib.auth` password reset mechanism.

.. setting:: PREPEND_WWW

PREPEND_WWW
-----------

Default: ``False``

Whether to prepend the "www." subdomain to URLs that don't have it. This is only
used if :class:`~django.middleware.common.CommonMiddleware` is installed
(see :doc:`/topics/http/middleware`). See also :setting:`APPEND_SLASH`.

.. setting:: PROFANITIES_LIST

PROFANITIES_LIST
----------------

Default: ``()`` (Empty tuple)

A tuple of profanities, as strings, that will be forbidden in comments when
:setting:`COMMENTS_ALLOW_PROFANITIES` is ``False``.

.. setting:: RESTRUCTUREDTEXT_FILTER_SETTINGS

RESTRUCTUREDTEXT_FILTER_SETTINGS
--------------------------------

Default: ``{}``

A dictionary containing settings for the ``restructuredtext`` markup filter from
the :doc:`django.contrib.markup application </ref/contrib/markup>`. They override
the default writer settings. See the Docutils restructuredtext `writer settings
docs`_ for details.

.. _writer settings docs: http://docutils.sourceforge.net/docs/user/config.html#html4css1-writer

.. setting:: ROOT_URLCONF

ROOT_URLCONF
------------

Default: Not defined

A string representing the full Python import path to your root URLconf. For example:
``"mydjangoapps.urls"``. Can be overridden on a per-request basis by
setting the attribute ``urlconf`` on the incoming ``HttpRequest``
object. See :ref:`how-django-processes-a-request` for details.

.. setting:: SECRET_KEY

SECRET_KEY
----------

Default: ``''`` (Empty string)

A secret key for this particular Django installation. Used to provide a seed in
secret-key hashing algorithms. Set this to a random string -- the longer, the
better. ``django-admin.py startproject`` creates one automatically.

.. setting:: SECURE_PROXY_SSL_HEADER

SECURE_PROXY_SSL_HEADER
-----------------------

.. versionadded:: 1.4

Default: ``None``

A tuple representing a HTTP header/value combination that signifies a request
is secure. This controls the behavior of the request object's ``is_secure()``
method.

This takes some explanation. By default, ``is_secure()`` is able to determine
whether a request is secure by looking at whether the requested URL uses
"https://".

If your Django app is behind a proxy, though, the proxy may be "swallowing" the
fact that a request is HTTPS, using a non-HTTPS connection between the proxy
and Django. In this case, ``is_secure()`` would always return ``False`` -- even
for requests that were made via HTTPS by the end user.

In this situation, you'll want to configure your proxy to set a custom HTTP
header that tells Django whether the request came in via HTTPS, and you'll want
to set ``SECURE_PROXY_SSL_HEADER`` so that Django knows what header to look
for.

You'll need to set a tuple with two elements -- the name of the header to look
for and the required value. For example::

    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTOCOL', 'https')

Here, we're telling Django that we trust the ``X-Forwarded-Protocol`` header
that comes from our proxy, and any time its value is ``'https'``, then the
request is guaranteed to be secure (i.e., it originally came in via HTTPS).
Obviously, you should *only* set this setting if you control your proxy or
have some other guarantee that it sets/strips this header appropriately.

Note that the header needs to be in the format as used by ``request.META`` --
all caps and likely starting with ``HTTP_``. (Remember, Django automatically
adds ``'HTTP_'`` to the start of x-header names before making the header
available in ``request.META``.)

.. warning::

    **You will probably open security holes in your site if you set this without knowing what you're doing. Seriously.**

    Make sure ALL of the following are true before setting this (assuming the
    values from the example above):

    * Your Django app is behind a proxy.
    * Your proxy strips the 'X-Forwarded-Protocol' header from all incoming
      requests. In other words, if end users include that header in their
      requests, the proxy will discard it.
    * Your proxy sets the 'X-Forwarded-Protocol' header and sends it to Django,
      but only for requests that originally come in via HTTPS.

    If any of those are not true, you should keep this setting set to ``None``
    and find another way of determining HTTPS, perhaps via custom middleware.

.. setting:: SEND_BROKEN_LINK_EMAILS

SEND_BROKEN_LINK_EMAILS
-----------------------

Default: ``False``

Whether to send an email to the :setting:`MANAGERS` each time somebody visits
a Django-powered page that is 404ed with a non-empty referer (i.e., a broken
link). This is only used if ``CommonMiddleware`` is installed (see
:doc:`/topics/http/middleware`). See also :setting:`IGNORABLE_404_URLS` and
:doc:`/howto/error-reporting`.

.. setting:: SERIALIZATION_MODULES

SERIALIZATION_MODULES
---------------------

Default: Not defined.

A dictionary of modules containing serializer definitions (provided as
strings), keyed by a string identifier for that serialization type. For
example, to define a YAML serializer, use::

    SERIALIZATION_MODULES = { 'yaml' : 'path.to.yaml_serializer' }

.. setting:: SERVER_EMAIL

SERVER_EMAIL
------------

Default: ``'root@localhost'``

The email address that error messages come from, such as those sent to
:setting:`ADMINS` and :setting:`MANAGERS`.

.. setting:: SESSION_COOKIE_AGE

SESSION_COOKIE_AGE
------------------

Default: ``1209600`` (2 weeks, in seconds)

The age of session cookies, in seconds. See :doc:`/topics/http/sessions`.

.. setting:: SESSION_COOKIE_DOMAIN

SESSION_COOKIE_DOMAIN
---------------------

Default: ``None``

The domain to use for session cookies. Set this to a string such as
``".lawrence.com"`` for cross-domain cookies, or use ``None`` for a standard
domain cookie. See the :doc:`/topics/http/sessions`.

.. setting:: SESSION_COOKIE_HTTPONLY

SESSION_COOKIE_HTTPONLY
-----------------------

Default: ``False``

Whether to use HTTPOnly flag on the session cookie. If this is set to
``True``, client-side JavaScript will not to be able to access the
session cookie.

HTTPOnly_ is a flag included in a Set-Cookie HTTP response header. It
is not part of the :rfc:`2109` standard for cookies, and it isn't honored
consistently by all browsers. However, when it is honored, it can be a
useful way to mitigate the risk of client side script accessing the
protected cookie data.

.. _HTTPOnly: http://www.owasp.org/index.php/HTTPOnly

.. setting:: SESSION_COOKIE_NAME

SESSION_COOKIE_NAME
-------------------

Default: ``'sessionid'``

The name of the cookie to use for sessions. This can be whatever you want (but
should be different from :setting:`LANGUAGE_COOKIE_NAME`).
See the :doc:`/topics/http/sessions`.

.. setting:: SESSION_COOKIE_PATH

SESSION_COOKIE_PATH
-------------------

Default: ``'/'``

The path set on the session cookie. This should either match the URL path of your
Django installation or be parent of that path.

This is useful if you have multiple Django instances running under the same
hostname. They can use different cookie paths, and each instance will only see
its own session cookie.

.. setting:: SESSION_COOKIE_SECURE

SESSION_COOKIE_SECURE
---------------------

Default: ``False``

Whether to use a secure cookie for the session cookie. If this is set to
``True``, the cookie will be marked as "secure," which means browsers may
ensure that the cookie is only sent under an HTTPS connection.
See the :doc:`/topics/http/sessions`.

.. setting:: SESSION_ENGINE

SESSION_ENGINE
--------------

Default: ``django.contrib.sessions.backends.db``

Controls where Django stores session data. Valid values are:

* ``'django.contrib.sessions.backends.db'``
* ``'django.contrib.sessions.backends.file'``
* ``'django.contrib.sessions.backends.cache'``
* ``'django.contrib.sessions.backends.cached_db'``
* ``'django.contrib.sessions.backends.signed_cookies'``

See :doc:`/topics/http/sessions`.

.. setting:: SESSION_EXPIRE_AT_BROWSER_CLOSE

SESSION_EXPIRE_AT_BROWSER_CLOSE
-------------------------------

Default: ``False``

Whether to expire the session when the user closes his or her browser.
See the :doc:`/topics/http/sessions`.

.. setting:: SESSION_FILE_PATH

SESSION_FILE_PATH
-----------------

Default: ``None``

If you're using file-based session storage, this sets the directory in
which Django will store session data. See :doc:`/topics/http/sessions`. When
the default value (``None``) is used, Django will use the standard temporary
directory for the system.

.. setting:: SESSION_SAVE_EVERY_REQUEST

SESSION_SAVE_EVERY_REQUEST
--------------------------

Default: ``False``

Whether to save the session data on every request. See
:doc:`/topics/http/sessions`.

.. setting:: SHORT_DATE_FORMAT

SHORT_DATE_FORMAT
-----------------

.. versionadded:: 1.2

Default: ``m/d/Y`` (e.g. ``12/31/2003``)

An available formatting that can be used for displaying date fields on
templates. Note that if :setting:`USE_L10N` is set to ``True``, then the
corresponding locale-dictated format has higher precedence and will be applied.
See :tfilter:`allowed date format strings <date>`.

See also :setting:`DATE_FORMAT` and :setting:`SHORT_DATETIME_FORMAT`.

.. setting:: SHORT_DATETIME_FORMAT

SHORT_DATETIME_FORMAT
---------------------

.. versionadded:: 1.2

Default: ``m/d/Y P`` (e.g. ``12/31/2003 4 p.m.``)

An available formatting that can be used for displaying datetime fields on
templates. Note that if :setting:`USE_L10N` is set to ``True``, then the
corresponding locale-dictated format has higher precedence and will be applied.
See :tfilter:`allowed date format strings <date>`.

See also :setting:`DATE_FORMAT` and :setting:`SHORT_DATE_FORMAT`.

.. setting:: SIGNING_BACKEND

SIGNING_BACKEND
---------------

.. versionadded:: 1.4

Default: 'django.core.signing.TimestampSigner'

The backend used for signing cookies and other data.

See also the :doc:`/topics/signing` documentation.

.. setting:: SITE_ID

SITE_ID
-------

Default: Not defined

The ID, as an integer, of the current site in the ``django_site`` database
table. This is used so that application data can hook into specific site(s)
and a single database can manage content for multiple sites.

See :doc:`/ref/contrib/sites`.

.. _site framework docs: ../sites/

.. setting:: STATIC_ROOT

STATIC_ROOT
-----------

Default: ``''`` (Empty string)

The absolute path to the directory where :djadmin:`collectstatic` will collect
static files for deployment.

Example: ``"/home/example.com/static/"``

If the :doc:`staticfiles</ref/contrib/staticfiles>` contrib app is enabled
(default) the :djadmin:`collectstatic` management command will collect static
files into this directory. See the howto on :doc:`managing static
files</howto/static-files>` for more details about usage.

.. warning::

    This should be an (initially empty) destination directory for collecting
    your static files from their permanent locations into one directory for
    ease of deployment; it is **not** a place to store your static files
    permanently. You should do that in directories that will be found by
    :doc:`staticfiles</ref/contrib/staticfiles>`'s
    :setting:`finders<STATICFILES_FINDERS>`, which by default, are
    ``'static/'`` app sub-directories and any directories you include in
    :setting:`STATICFILES_DIRS`).

See :doc:`staticfiles reference</ref/contrib/staticfiles>` and
:setting:`STATIC_URL`.

.. setting:: STATIC_URL

STATIC_URL
----------

Default: ``None``

URL to use when referring to static files located in :setting:`STATIC_ROOT`.

Example: ``"/site_media/static/"`` or ``"http://static.example.com/"``

If not ``None``, this will be used as the base path for
:ref:`media definitions<form-media-paths>` and the
:doc:`staticfiles app</ref/contrib/staticfiles>`.

It must end in a slash if set to a non-empty value.

See :setting:`STATIC_ROOT`.

.. setting:: TEMPLATE_CONTEXT_PROCESSORS

TEMPLATE_CONTEXT_PROCESSORS
---------------------------

Default::

    ("django.contrib.auth.context_processors.auth",
    "django.core.context_processors.debug",
    "django.core.context_processors.i18n",
    "django.core.context_processors.media",
    "django.core.context_processors.static",
    "django.core.context_processors.tz",
    "django.contrib.messages.context_processors.messages")

A tuple of callables that are used to populate the context in ``RequestContext``.
These callables take a request object as their argument and return a dictionary
of items to be merged into the context.

.. versionchanged:: 1.2
   ``django.contrib.messages.context_processors.messages`` was added to the
   default.  For more information, see the :doc:`messages documentation
   </ref/contrib/messages>`.

.. versionchanged:: 1.2
    The auth context processor was moved in this release from its old location
    ``django.core.context_processors.auth`` to
    ``django.contrib.auth.context_processors.auth``.

.. versionadded:: 1.3
    The ``django.core.context_processors.static`` context processor
    was added in this release.

.. versionadded:: 1.4
    The ``django.core.context_processors.tz`` context processor
    was added in this release.

.. setting:: TEMPLATE_DEBUG

TEMPLATE_DEBUG
--------------

Default: ``False``

A boolean that turns on/off template debug mode. If this is ``True``, the fancy
error page will display a detailed report for any exception raised during
template rendering. This report contains the relevant snippet of the template,
with the appropriate line highlighted.

Note that Django only displays fancy error pages if :setting:`DEBUG` is ``True``, so
you'll want to set that to take advantage of this setting.

See also :setting:`DEBUG`.

.. setting:: TEMPLATE_DIRS

TEMPLATE_DIRS
-------------

Default: ``()`` (Empty tuple)

List of locations of the template source files searched by
:class:`django.template.loaders.filesystem.Loader`, in search order.

Note that these paths should use Unix-style forward slashes, even on Windows.

See :doc:`/topics/templates`.

.. setting:: TEMPLATE_LOADERS

TEMPLATE_LOADERS
----------------

Default::

     ('django.template.loaders.filesystem.Loader',
      'django.template.loaders.app_directories.Loader')

A tuple of template loader classes, specified as strings. Each ``Loader`` class
knows how to import templates from a particular source. Optionally, a tuple can be
used instead of a string. The first item in the tuple should be the ``Loader``'s
module, subsequent items are passed to the ``Loader`` during initialization. See
:doc:`/ref/templates/api`.

.. versionchanged:: 1.2
    The class-based API for template loaders was introduced in Django 1.2
    although  the :setting:`TEMPLATE_LOADERS` setting will accept strings
    that specify function-based loaders until compatibility with them is
    completely removed in Django 1.4.

.. setting:: TEMPLATE_STRING_IF_INVALID

TEMPLATE_STRING_IF_INVALID
--------------------------

Default: ``''`` (Empty string)

Output, as a string, that the template system should use for invalid (e.g.
misspelled) variables. See :ref:`invalid-template-variables`..

.. setting:: TEST_RUNNER

TEST_RUNNER
-----------

Default: ``'django.test.simple.DjangoTestSuiteRunner'``

.. versionchanged:: 1.2
   Prior to 1.2, test runners were a function, not a class.

The name of the class to use for starting the test suite. See
:doc:`/topics/testing`.

.. _Testing Django Applications: ../testing/

.. setting:: THOUSAND_SEPARATOR

THOUSAND_SEPARATOR
------------------

.. versionadded:: 1.2

Default: ``,`` (Comma)

Default thousand separator used when formatting numbers. This setting is
used only when :setting:`USE_THOUSAND_SEPARATOR` is ``True`` and
:setting:`NUMBER_GROUPING` is greater than ``0``.

Note that if :setting:`USE_L10N` is set to ``True``, then the locale-dictated
format has higher precedence and will be applied instead.

See also :setting:`NUMBER_GROUPING`, :setting:`DECIMAL_SEPARATOR` and
:setting:`USE_THOUSAND_SEPARATOR`.

.. setting:: TIME_FORMAT

TIME_FORMAT
-----------

Default: ``'P'`` (e.g. ``4 p.m.``)

The default formatting to use for displaying time fields in any part of the
system. Note that if :setting:`USE_L10N` is set to ``True``, then the
locale-dictated format has higher precedence and will be applied instead. See
:tfilter:`allowed date format strings <date>`.

.. versionchanged:: 1.2
    This setting can now be overriden by setting :setting:`USE_L10N` to ``True``.

See also :setting:`DATE_FORMAT` and :setting:`DATETIME_FORMAT`.

.. setting:: TIME_INPUT_FORMATS

TIME_INPUT_FORMATS
------------------

.. versionadded:: 1.2

Default: ``('%H:%M:%S', '%H:%M')``

A tuple of formats that will be accepted when inputting data on a time field.
Formats will be tried in order, using the first valid one. Note that these
format strings use Python's datetime_ module syntax, not the format strings
from the ``date`` Django template tag.

When :setting:`USE_L10N` is ``True``, the locale-dictated format has higher
precedence and will be applied instead.

See also :setting:`DATE_INPUT_FORMATS` and :setting:`DATETIME_INPUT_FORMATS`.

.. _datetime: http://docs.python.org/library/datetime.html#strftime-strptime-behavior

.. setting:: TIME_ZONE

TIME_ZONE
---------

Default: ``'America/Chicago'``

.. versionchanged:: 1.2
   ``None`` was added as an allowed value.

.. versionchanged:: 1.4
   The meaning of this setting now depends on the value of :setting:`USE_TZ`.

A string representing the time zone for this installation, or
``None``. `See available choices`_. (Note that list of available
choices lists more than one on the same line; you'll want to use just
one of the choices for a given time zone. For instance, one line says
``'Europe/London GB GB-Eire'``, but you should use the first bit of
that -- ``'Europe/London'`` -- as your :setting:`TIME_ZONE` setting.)

Note that this isn't necessarily the time zone of the server. For example, one
server may serve multiple Django-powered sites, each with a separate time zone
setting.

When :setting:`USE_TZ` is ``False``, this is the time zone in which Django
will store all datetimes. When :setting:`USE_TZ` is ``True``, this is the
default time zone that Django will use to display datetimes in templates and
to interpret datetimes entered in forms.

Django sets the ``os.environ['TZ']`` variable to the time zone you specify in
the :setting:`TIME_ZONE` setting. Thus, all your views and models will
automatically operate in this time zone. However, Django won't set the ``TZ``
environment variable under the following conditions:

* If you're using the manual configuration option as described in
  :ref:`manually configuring settings
  <settings-without-django-settings-module>`, or

* If you specify ``TIME_ZONE = None``. This will cause Django to fall
  back to using the system time zone.

If Django doesn't set the ``TZ`` environment variable, it's up to you
to ensure your processes are running in the correct environment.

.. note::
    Django cannot reliably use alternate time zones in a Windows environment.
    If you're running Django on Windows, :setting:`TIME_ZONE` must be set to
    match the system time zone.

.. _See available choices: http://www.postgresql.org/docs/8.1/static/datetime-keywords.html#DATETIME-TIMEZONE-SET-TABLE

.. _pytz: http://pytz.sourceforge.net/

.. setting:: URL_VALIDATOR_USER_AGENT

URL_VALIDATOR_USER_AGENT
------------------------

Default: ``Django/<version> (https://www.djangoproject.com/)``

The string to use as the ``User-Agent`` header when checking to see if
URLs exist (see the ``verify_exists`` option on
:class:`~django.db.models.URLField`). This setting was deprecated in
1.3.1 along with ``verify_exists`` and will be removed in 1.4.

.. setting:: USE_ETAGS

USE_ETAGS
---------

Default: ``False``

A boolean that specifies whether to output the "Etag" header. This saves
bandwidth but slows down performance. This is used by the ``CommonMiddleware``
(see :doc:`/topics/http/middleware`) and in the``Cache Framework``
(see :doc:`/topics/cache`).

.. setting:: USE_I18N

USE_I18N
--------

Default: ``True``

A boolean that specifies whether Django's translation system should be enabled.
This provides an easy way to turn it off, for performance. If this is set to
``False``, Django will make some optimizations so as not to load the
translation machinery.

See also :setting:`LANGUAGE_CODE`, :setting:`USE_L10N` and :setting:`USE_TZ`.

.. setting:: USE_L10N

USE_L10N
--------

.. versionadded:: 1.2

Default: ``False``

A boolean that specifies if localized formatting of data will be enabled by
default or not. If this is set to ``True``, e.g. Django will display numbers and
dates using the format of the current locale.

See also :setting:`LANGUAGE_CODE`, :setting:`USE_I18N` and :setting:`USE_TZ`.

.. note::

    The default :file:`settings.py` file created by :djadmin:`django-admin.py
    startproject <startproject>` includes ``USE_L10N = True`` for convenience.

.. setting:: USE_THOUSAND_SEPARATOR

USE_THOUSAND_SEPARATOR
----------------------

.. versionadded:: 1.2

Default: ``False``

A boolean that specifies whether to display numbers using a thousand separator.
When :setting:`USE_L10N` is set to ``True`` and if this is also set to
``True``, Django will use the values of :setting:`THOUSAND_SEPARATOR` and
:setting:`NUMBER_GROUPING` to format numbers.

See also :setting:`DECIMAL_SEPARATOR`, :setting:`NUMBER_GROUPING` and
:setting:`THOUSAND_SEPARATOR`.

.. setting:: USE_TZ

USE_TZ
------

.. versionadded:: 1.4

Default: ``False``

A boolean that specifies if datetimes will be timezone-aware by default or not.
If this is set to ``True``, Django will use timezone-aware datetimes internally.
Otherwise, Django will use naive datetimes in local time.

See also :setting:`TIME_ZONE`, :setting:`USE_I18N` and :setting:`USE_L10N`.

.. note::

    The default :file:`settings.py` file created by
    :djadmin:`django-admin.py startproject <startproject>` includes
    ``USE_TZ = True`` for convenience.

.. setting:: USE_X_FORWARDED_HOST

USE_X_FORWARDED_HOST
--------------------

.. versionadded:: 1.3.1

Default: ``False``

A boolean that specifies whether to use the X-Forwarded-Host header in
preference to the Host header. This should only be enabled if a proxy
which sets this header is in use.

.. setting:: WSGI_APPLICATION

WSGI_APPLICATION
----------------

.. versionadded:: 1.4

Default: ``None``

The full Python path of the WSGI application object that Django's built-in
servers (e.g. :djadmin:`runserver`) will use. The :djadmin:`django-admin.py
startproject <startproject>` management command will create a simple
``wsgi.py`` file with an ``application`` callable in it, and point this setting
to that ``application``.

If not set, the return value of :func:`django.core.wsgi.get_wsgi_application`
will be used. In this case, the behavior of :djadmin:`runserver` will be
identical to previous Django versions.

.. setting:: YEAR_MONTH_FORMAT

YEAR_MONTH_FORMAT
-----------------

Default: ``'F Y'``

The default formatting to use for date fields on Django admin change-list
pages -- and, possibly, by other parts of the system -- in cases when only the
year and month are displayed.

For example, when a Django admin change-list page is being filtered by a date
drilldown, the header for a given month displays the month and the year.
Different locales have different formats. For example, U.S. English would say
"January 2006," whereas another locale might say "2006/January."

See :tfilter:`allowed date format strings <date>`. See also
:setting:`DATE_FORMAT`, :setting:`DATETIME_FORMAT`, :setting:`TIME_FORMAT`
and :setting:`MONTH_DAY_FORMAT`.

.. setting:: X_FRAME_OPTIONS

X_FRAME_OPTIONS
---------------

Default: ``'SAMEORIGIN'``

The default value for the X-Frame-Options header used by
:class:`~django.middleware.clickjacking.XFrameOptionsMiddleware`. See the
:doc:`clickjacking protection </ref/clickjacking/>` documentation.

Deprecated settings
===================

.. setting:: ADMIN_MEDIA_PREFIX

ADMIN_MEDIA_PREFIX
------------------

.. deprecated:: 1.4
   This setting has been obsoleted by the ``django.contrib.staticfiles`` app
   integration. See the :doc:`Django 1.4 release notes</releases/1.4>` for
   more information.

.. setting:: CACHE_BACKEND

CACHE_BACKEND
-------------

.. deprecated:: 1.3
   This setting has been replaced by :setting:`BACKEND <CACHES-BACKEND>` in
   :setting:`CACHES`.

.. setting:: IGNORABLE_404_ENDS

IGNORABLE_404_ENDS
------------------

.. deprecated:: 1.4
   This setting has been superseded by :setting:`IGNORABLE_404_URLS`.

.. setting:: IGNORABLE_404_STARTS

IGNORABLE_404_STARTS
--------------------

.. deprecated:: 1.4
   This setting has been superseded by :setting:`IGNORABLE_404_URLS`.
