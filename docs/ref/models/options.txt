===================
Model ``Meta`` 选项
===================

本文介绍你能在model中使用的 ``class Meta`` 内嵌类的所有 :ref:`元数据选项 (meta options)
<meta-options>`


``Meta`` 可用选项 (Available ``Meta`` options)
==============================================

.. currentmodule:: django.db.models

``abstract``
------------

.. attribute:: Options.abstract

    如果 ``abstract = True``, 这个 model 就是一个 :ref:`抽象基类 <abstract-base-classes>`.

``app_label``
-------------

.. attribute:: Options.app_label

    如果一个 model 定义在默认的 :file:`models.py` 之外 (例如, 如果你的 app 的 models 在
    ``myapp.models`` 子模块下), 你必须定义 app_label 让 Django 知道它属于哪一个 app ::

        app_label = 'myapp'

``db_table``
------------

.. attribute:: Options.db_table

    定义该 model 在数据中的表名称::

        db_table = 'music_album'

.. _table-names:


数据库中的表名称
~~~~~~~~~~~~~~~~

为了节省时间, Django 会自动的使用你的 model class 的名称和包含这个 model 的 app 名称来构建
数据库的表名称. 一个 model 的数据库表名称是通过将 "app label" -- 你在 :djadmin:`manage.py
startapp <startapp>` 中使用的名称 -- 和 model 的类名称， 加上一个下划线在他们之间来构成.

例如, 如果你有一个 app ``bookstore`` (使用 ``manage.py startapp bookstore`` 创建), 以及一个
model 定义为 ``class Book`` 这样将创建一个名为 ``bookstore_book`` 的数据库表.

如果想自定义数据库的表名称, 需要在 ``class Meta`` 使用 ``db_table`` 参数来自定义.

如果你的数据库表名称是一个SQL保留字, 或者它包含不允许出现在 Python 变量中的字符 (比如连字符)
这是没问题的. 这是因为 Django 会自动给列名和表名添加引号.

.. admonition:: 在 MySQL 中使用小写字母作为数据库表名称

    强烈建议你在通过 ``db_table`` 重载数据库表名称时, 使用小写字母, 特别是当你在使用 MySQL
    作为后台数据库时. 查看 :ref:`MySQL notes <mysql-notes>` 了解更多细节.

``db_tablespace``
-----------------

.. attribute:: Options.db_tablespace

    定义这个 model 所使用的 :doc:`数据库 表空间 </topics/db/tablespaces>`. 如果在项目的
    setting 中定义了 :setting:`DEFAULT_TABLESPACE` 那么它会使用这个值. 如果后台数据库不支持
    表空间, 这个选项会被忽略.

``get_latest_by``
-----------------

.. attribute:: Options.get_latest_by

    在 model 中指定一个 :class:`DateField` 或者 :class:`DateTimeField` . 这个设置让你在使用
    model 的 :class:`Manager` 上的 :class:`~QuerySet.latest` 方法时, 默认使用指定字段来排序.

    例如::

        get_latest_by = "order_date"

    详见 :meth:`~django.db.models.query.QuerySet.latest` .

``managed``
-----------

.. attribute:: Options.managed

    默认值为 ``True``, 这意味着 Django 可以使用 :djadmin:`syncdb` 和 :djadmin:`reset` 命令
    来创建或移除对应的数据库. 换句话说, Django *管理* 了数据库的生命周期.

    如果设置为 ``False``, Django 将不会为当前 model 创建或者删除数据库表. 通常在表示某个通
    过其他方法创建的现有数据表时这会非常有用. 这是当 ``managed=False`` 时 *仅有* 的不同之处.
    model 在处理所有其他方面的事情时是完全一致的. 这包括

    1. 如果没有声明主键字段, Django 将自动的为 model 增加一个自增的主键字段. 当你使用不被
       *管理* 的 models 时, 为了避免让将来阅读代码的人迷惑, 建议指明所有所有托管在 model 中的
       字段与数据库表的关系.

    2. 如果两个非托管的 models (``managed=False``) 之间, 使用了
       :class:`~django.db.models.ManyToManyField` 关联, 就不会创建多对多关系的中间表. 然而如果
       是一个托管的 model 与另一个非托管的 model 的话, 多对多关系 *将会* 被创建.

       如果你需要改变默认的行为, 就的显示的定义中间 model 来在数据库中创建中间表(要将
       ``managed`` 设置为 ``True``), 然后在你的原 model 上使用
       :attr:`ManyToManyField.through` 属性指向中间 model, 就能实现自定义的多对多关系.


    如果你的测试中包含非托管 model (``managed=False``), 那么在测试之前, 你应该要确保在测试
    创建时已经创建了正确的数据表.

    如果你想更改 model 类中某个 Python 层级的行为, 你 *可以* 令 ``managed=False``, 然后创建
    该 model 的拷贝, 在拷贝中定义新的行为. 不过在面对这种情况时还有个更好的办法就是使用
    :ref:`proxy-models`.


``order_with_respect_to``
-------------------------

.. attribute:: Options.order_with_respect_to

    Marks this object as "orderable" with respect to the given field. This is almost
    always used with related objects to allow them to be ordered with respect to a
    parent object. For example, if an ``Answer`` relates to a ``Question`` object,
    and a question has more than one answer, and the order of answers matters, you'd
    do this::

        class Answer(models.Model):
            question = models.ForeignKey(Question)
            # ...

            class Meta:
                order_with_respect_to = 'question'

    When ``order_with_respect_to`` is set, two additional methods are provided to
    retrieve and to set the order of the related objects: ``get_RELATED_order()``
    and ``set_RELATED_order()``, where ``RELATED`` is the lowercased model name. For
    example, assuming that a ``Question`` object has multiple related ``Answer``
    objects, the list returned contains the primary keys of the related ``Answer``
    objects::

        >>> question = Question.objects.get(id=1)
        >>> question.get_answer_order()
        [1, 2, 3]

    The order of a ``Question`` object's related ``Answer`` objects can be set by
    passing in a list of ``Answer`` primary keys::

        >>> question.set_answer_order([3, 1, 2])

    The related objects also get two methods, ``get_next_in_order()`` and
    ``get_previous_in_order()``, which can be used to access those objects in their
    proper order. Assuming the ``Answer`` objects are ordered by ``id``::

        >>> answer = Answer.objects.get(id=2)
        >>> answer.get_next_in_order()
        <Answer: 3>
        >>> answer.get_previous_in_order()
        <Answer: 1>

.. admonition:: Changing order_with_respect_to

        ``order_with_respect_to`` adds an additional field/database column
        named ``_order``, so be sure to handle that as you would any other
        change to your models if you add or change ``order_with_respect_to``
        after your initial :djadmin:`syncdb`.

``ordering``
------------

.. attribute:: Options.ordering

    The default ordering for the object, for use when obtaining lists of objects::

        ordering = ['-order_date']

    This is a tuple or list of strings. Each string is a field name with an optional
    "-" prefix, which indicates descending order. Fields without a leading "-" will
    be ordered ascending. Use the string "?" to order randomly.

    For example, to order by a ``pub_date`` field ascending, use this::

        ordering = ['pub_date']

    To order by ``pub_date`` descending, use this::

        ordering = ['-pub_date']

    To order by ``pub_date`` descending, then by ``author`` ascending, use this::

        ordering = ['-pub_date', 'author']

    .. versionchanged:: 1.4
       The Django admin honors all elements in the list/tuple; before 1.4, only
       the first one was respected.

``permissions``
---------------

.. attribute:: Options.permissions

    Extra permissions to enter into the permissions table when creating this object.
    Add, delete and change permissions are automatically created for each object
    that has ``admin`` set. This example specifies an extra permission,
    ``can_deliver_pizzas``::

        permissions = (("can_deliver_pizzas", "Can deliver pizzas"),)

    This is a list or tuple of 2-tuples in the format ``(permission_code,
    human_readable_permission_name)``.

``proxy``
---------

.. attribute:: Options.proxy

    If ``proxy = True``, a model which subclasses another model will be treated as
    a :ref:`proxy model <proxy-models>`.

``unique_together``
-------------------

.. attribute:: Options.unique_together

    Sets of field names that, taken together, must be unique::

        unique_together = (("driver", "restaurant"),)

    This is a list of lists of fields that must be unique when considered together.
    It's used in the Django admin and is enforced at the database level (i.e., the
    appropriate ``UNIQUE`` statements are included in the ``CREATE TABLE``
    statement).

    For convenience, unique_together can be a single list when dealing with a single
    set of fields::

        unique_together = ("driver", "restaurant")

    A :class:`~django.db.models.ManyToManyField` cannot be included in
    unique_together. (It's not clear what that would even mean!) If you
    need to validate uniqueness related to a
    :class:`~django.db.models.ManyToManyField`, try using a signal or
    an explicit :attr:`through <ManyToManyField.through>` model.

``verbose_name``
----------------

.. attribute:: Options.verbose_name

    A human-readable name for the object, singular::

        verbose_name = "pizza"

    If this isn't given, Django will use a munged version of the class name:
    ``CamelCase`` becomes ``camel case``.

``verbose_name_plural``
-----------------------

.. attribute:: Options.verbose_name_plural

    The plural name for the object::

        verbose_name_plural = "stories"

    If this isn't given, Django will use :attr:`~Options.verbose_name` + ``"s"``.
